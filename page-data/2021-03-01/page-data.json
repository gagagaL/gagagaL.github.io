{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-03-01/","result":{"data":{"site":{"siteMetadata":{"title":"ヨット逆走JS"}},"markdownRemark":{"id":"d1c8c85f-1f5d-5f4d-a46e-236520ac935f","excerpt":"マーチン・ファウラー著『リファクタリング プログラミングの体質改善テクニック』をまとめていく。 気になった箇所、現在にも応用できそうな箇所を特に記載していくので、全てを書き記すわけではない。 第…","html":"<p>マーチン・ファウラー著『リファクタリング プログラミングの体質改善テクニック』をまとめていく。<br>\n気になった箇所、現在にも応用できそうな箇所を特に記載していくので、全てを書き記すわけではない。</p>\n<h1>第1章  リファクタリング-最初の例</h1>\n<p>実例を交えながらリファクタリングがどういうものか説明している。<br>\n<strong>全体を読んだ後に読んだ方が良さそうなので後回し。</strong></p>\n<h1>第2章 リファクタリングの原則</h1>\n<h2>リファクタリングの定義</h2>\n<p><strong>リファクタリング(名詞)</strong>…外部から見た時の振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変換させること。  </p>\n<p><strong>リファクタリングする(動詞)</strong>…一連のリファクタリングを行って、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること。</p>\n<h2>リファクタリングを行う理由</h2>\n<p><strong>・リファクタリングはソフトウェア設計を向上させる</strong></p>\n<p><strong>・リファクタリングはソフトウェアを理解しやすくする</strong></p>\n<p><strong>・リファクタリングはバグを見つけ出す</strong></p>\n<p><strong>・リファクタリングでより早くプログラミングできる</strong></p>\n<h2>いつリファクタリングするべきか</h2>\n<p><strong>・“三度目の法則”</strong></p>\n<p>重複や無駄を意識しつつも二度目までならとにかく作業を続けても構わず、三度目に同じようなことをしていると気づいたならばそこでリファクタリングする。  </p>\n<p><strong>・機能追加時にリファクタリングを行う</strong></p>\n<p>これから修正しようとしているコードを理解する為、容易に機能追加ができない設計が存在する為</p>\n<p><strong>・バグフィックス時にリファクタリングを行う</strong></p>\n<p><strong>・コードレビューの時にリファクタリングを行う</strong></p>\n<h1>第3章 コードの不吉な匂い</h1>\n<p>リファクタリングの必要を示す不吉な兆候<br>\n<strong>特に重要な章</strong></p>\n<h2>重複したコード</h2>\n<p>同じようなコードが二箇所以上で見られたら、一箇所にまとめることを考える  </p>\n<p>同一クラス内の複数メソッドに同じ式がある→<strong>メソッドの抽出</strong></p>\n<p>重複したコードが兄弟クラス間に見られる→<strong>メソッドの抽出</strong>、<strong>メソッドの引き上げ</strong></p>\n<p>全く関係のない二つのクラス間で重複したコードが見られる→<strong>クラスの抽出</strong></p>\n<h2>長すぎるメソッド</h2>\n<p>間接層を持たせるべき。  </p>\n<p>メソッドを短くしたい→<strong>メソッドの抽出</strong></p>\n<p>引数や一時変数が多すぎるメソッド→<strong>問い合わせによる一時変数の置き換え</strong></p>\n<p>長い引数リスト→<strong>引数オブジェクトの導入</strong>、<strong>オブジェクトそのものの受け渡し</strong></p>\n<p>それでも一時変数や引数が残る→<strong>メソッドオブジェクトによるメソッドの置き換え</strong></p>\n<p>条件分岐やループ→<strong>条件記述の分解</strong></p>\n<h2>巨大なクラス</h2>\n<p>一つのクラスがあまりに多くの仕事をしている時、たいていインスタンス変数を持ちすぎている。よって重複コードが現れやすい。</p>\n<p>いくつかの変数をまとめる→<strong>クラスの抽出</strong></p>\n<p>新しいコンポーネントがサブクラスになりそう→<strong>サブクラスの抽出</strong></p>\n<p>クラスがインスタンス変数を全て使っていない→<strong>クラスの抽出</strong>、<strong>サブクラスの抽出</strong></p>\n<p><strong>インタフェースの抽出</strong></p>\n<p>巨大なクラスがGUI部分である→<strong>観察されるデータの複製</strong></p>\n<h2>多すぎる引数</h2>\n<p>既知のオブジェクトに問い合わせてそのデータを一つの引数にしてうけとることが可能→<strong>メソッドによる引数の置き換え</strong></p>\n<p><strong>オブジェクトそのものの受け渡し</strong>、<strong>引数オブジェクトの導入</strong></p>\n<h2>変更の発散</h2>\n<p>一つのクラスが互いに独立した理由で同じように変更され、その手順も異なる状態<br>\n(例)データベースが新しくなるたびに3つのメソッドを変更しなければならない</p>\n<p>変更理由ごとにクラスをまとめていく→<strong>クラスの抽出</strong></p>","frontmatter":{"title":"『リファクタリング』まとめ Part1","date":"2021.03.01","description":"書籍『リファクタリング』のまとめ"}},"previous":{"fields":{"slug":"/2021-02-26/"},"frontmatter":{"title":"0円で作るGatsby + Github Pagesの静的ブログ 2"}},"next":{"fields":{"slug":"/2021-03-02/"},"frontmatter":{"title":"『Linuxプログラミングインタフェース』まとめ Part1"}}},"pageContext":{"id":"d1c8c85f-1f5d-5f4d-a46e-236520ac935f","previousPostId":"1190e5ff-9e84-56b7-aee6-60066032660c","nextPostId":"1314cc64-4c43-5263-8d3a-2f28296404f8"}},"staticQueryHashes":["2841359383","916993862"]}