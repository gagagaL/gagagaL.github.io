{"componentChunkName":"component---src-templates-blog-post-js","path":"/エリック・エヴァンスのドメイン駆動設計/","result":{"data":{"site":{"siteMetadata":{"title":"ヨット逆走JS"}},"markdownRemark":{"id":"3528951c-b974-5649-ba8e-484247a52f60","excerpt":"序文 DDDの原則 コアドメインに集中すること ドメインの実践者とソフトウェアの実践者による創造的な共同作業を通じてモデルを探求すること 明示的な境界づけられたコンテキストの内部でユビキタス言語を語ること 前提 開発がイテレーティブ(反復的)であること 開発者とドメインエキスパートが密接に関わっている 第…","html":"<h1>序文</h1>\n<p><strong>DDDの原則</strong></p>\n<ul>\n<li>コアドメインに集中すること</li>\n<li>ドメインの実践者とソフトウェアの実践者による創造的な共同作業を通じてモデルを探求すること</li>\n<li>明示的な境界づけられたコンテキストの内部でユビキタス言語を語ること</li>\n</ul>\n<p><strong>前提</strong></p>\n<ol>\n<li>開発がイテレーティブ(反復的)であること</li>\n<li>開発者とドメインエキスパートが密接に関わっている</li>\n</ol>\n<hr>\n<h1>第0章</h1>\n<p>モデル\nモデルとは簡素化であり、問題を解決する上で関連する側面を抽象化し、それ以外の詳細を無視することによって行われた<strong>現実に対する一つの解釈</strong>\n図を用いて表現する</p>\n<p>ドメイン\nソフトウェアプログラムはそれを使用するユーザーの何らかの活動や関心と関係があり、ユーザーがプログラムを適用する対象領域がソフトウェアのドメインである\nドメインは具象も抽象(システムなど)もあり得る</p>\n<p>ドメインモデルとは特定の図ではなく、図が伝えようとしている考え方である</p>\n<h2>ドメイン駆動設計におけるモデルの有用性</h2>\n<ol>\n<li>モデルと設計の確信が相互に形成し合う</li>\n<li>モデルはチームメンバー全員が使用する言語の基盤である</li>\n<li>モデルとは蒸留された知識である…モデルは、ドメインの知識を構成して最も関心のある要素を区別するための、チーム内で取り決めた方法である</li>\n</ol>\n<p>ソフトウェアの核心はドメインに関係した問題をユーザーの為に解決する能力である</p>\n<p>モンティ・パイソンの例</p>\n<h1>第1章</h1>\n<p>知識を噛み砕く</p>\n<h2>効果的なモデリングの要素</h2>\n<ol>\n<li>モデルと実装を結びつける</li>\n<li>モデルに基づいて言語を洗練させる</li>\n<li>知識豊富なモデルを開発する</li>\n<li>モデルを蒸留する</li>\n<li>ブレインストーミングと実験を行う</li>\n</ol>\n<p><strong>知識の噛み砕き</strong></p>\n<p><strong>継続的学習</strong>\n→<strong>ソフトウェアを書き始める時、我々は対象を十分に理解しているわけではない</strong></p>\n<p>ポリシーも考える必要がある</p>\n<p>知識を噛み砕くことによって初めて、ルールが明確となり、具体化され、折り合いがつけられるか、あるいはスコープの対象外とされるのである</p>\n<h1>第2章(コミュニケーションと言語の使い方)</h1>\n<p>ドメインモデルは、ソフトウェアプロジェクトにおける共通言語のコアとなることができる</p>\n<p>モデルとは、プロジェクトに関わる人々の頭の中で構築された概念の塊であり、ドメインについての洞察を反映した用語と概念間の関係性からできている</p>\n<p>ドメインエキスパートと開発者での言語の亀裂が問題である</p>\n<p><strong>共通言語（ユビキタス言語）を図やドキュメント、会話の中で用いることユビキタス言語の変更はモデルに対する変更だと思っていること</strong></p>\n<p>ユビキタス言語の語彙には、クラスや主要な操作の名前が含まれていて、また、モデルの中で明示されたルールについて議論するための用語も含まれている</p>\n<p>ユビキタス言語は開発者同士、開発者とドメインエキスパート同士で当然の如く用いられてなければならない</p>\n<p>ユビキタス言語を用いる上での不便さこそが設計の不備を教えてくれる</p>\n<p><strong>ユビキタス言語における変更は、モデルに対する変更である</strong></p>\n<p>ユビキタス言語は、設計にあってコードに現れない側面を伝達するための主要な手段である</p>\n<p>モデルを改良する最適な方法の一つは<strong>話すこと</strong>である</p>\n<p><strong>ドメインエキスパートがモデルを理解できないのなら、モデルに問題がある</strong></p>\n<p>モデルは図ではない</p>\n<p>ドキュメントが守るべき指針</p>\n<ol>\n<li><strong>すでにコードがうまくやっていることを、ドキュメントでもやろうとするべきでは無い</strong></li>\n<li><strong>ドキュメントは活動の役に立たなければならず、最新の状態に保たなければならない</strong></li>\n</ol>\n<h1>第3章(モデルと実装を結びつける)</h1>\n<p>モデルを作るもののコーディングとは結びつかない(あるいは意図的に断絶される)ものが多い</p>\n<p><strong>設計、あるいは設計の中心となる部分がドメインモデルに紐づいていないならばそのモデルにほとんど価値はなく、そのソフトウェアが正確かどうかも疑わしい。分析と設計の間に致命的な亀裂が生じていると、それらの作業で得られる洞察は互いに生かされない</strong></p>\n<p>モデル駆動設計は分析モデルと設計という二分法を捨て去り、両方の目的に使える単一のモデルを探し出す。\n<strong>そのモデルは全く別々の二つの目標を満たす必要があるため、我々はモデルに対する要求をもっと厳しくしなければならない</strong></p>\n<h2>ソフトウェアシステムの一部を設計する際には、紐づけが明らかになるようにドメインモデルを文字通りの意味で忠実に反映させる必要がある。モデルについて再検討し、より自然にソフトウェアに実装されるように修正する。逆にドメインに対する深い洞察を反映させようとするときにも言える。</h2>\n<p>モデルは全員の共通認識にしなければならない</p>\n<h1>第4章(ドメインを隔離する)</h1>\n<h2>オブジェクト指向プログラムでは、UI、DB、およびその他の補助的なコードがビジネスオブジェクトに直接描かれることはしばしばあるが、ドメイン関連のコードがそうした膨大な他のコード内に拡散してしまうと、コードを見て意味を理解するのが極めて困難になってしまう。</h2>\n<p>↓\nドメインオブジェクトはシステムの他の昨日から切り離されていなければならない。</p>\n<p><strong>レイヤ化アーキテクチャー</strong></p>\n<ul>\n<li>UI層(プレゼンテーション層)…ユーザーに情報を提示し、ユーザーのコマンドを解釈する責務を負う</li>\n<li>アプリケーション層…ソフトウェアが行うことになっている仕事を定義し、表現力豊かなドメインオブジェクトが問題を解決するように導く。このレイヤは薄く保たれる。</li>\n<li>ドメイン層(モデル層) …ビジネスの概念と、ビジネスが置かれた状況に関す情報、およびビジネスルールを表す責務を負う。<strong>この層がビジネスソフトウェアの確信である</strong></li>\n<li>インフラストラクチャ層…上位のレイヤを支える一般的な技術的機能を提供する。\nプロジェクトによってはUI層とアプリケーション層を厳密に区別しなかったり、複数のインフラストラクチャ層を持つこともある。しかし、ドメイン層を分離して初めてモデル駆動開発が可能になる。\nそれゆえ、</li>\n</ul>\n<h2>複雑なプログラムはレイヤに分割すること。各レイヤで設計を進め、凝集度を高めて下位層にだけ依存すること。上位のレイヤに対しては疎結合を保つこと。ドメインモデルに関係するコード全部を一つの層に集中させ、他の層から分離すること。表示や格納、アプリケーションタスク管理などの責務から解放されること。</h2>\n<p>上位のレイヤは下位のレイヤにある要素を直接使用したり操作したりできる。下位のレイヤにあるオブジェクトが上位と通信しなければならない場合は、コールバックやオブザーバなど、レイヤ同士を関係付ける別のアーキテクチャパターン・仕組みが必要になる。</p>\n<h2>アンチパターン「利口なUI」</h2>\n<h1>第5章(ソフトウェアで表現されたモデル)</h1>\n<h2>モデルを表現する3パターン</h2>\n<ul>\n<li><strong>エンティティ</strong></li>\n<li><strong>値オブジェクト</strong></li>\n<li><strong>サービス</strong> (オブジェクトというより操作やアクションとして捉えた方がいいもの)</li>\n</ul>\n<p>また、モデル駆動設計においてモジュールもモデルの一部であり、ドメインにある概念を反映していなければならない</p>\n<p>モデリングにおける関連は実装における関連とそれぞれ特性が同じものが存在するべきである\n関連を扱いやすくする方法</p>\n<ol>\n<li>関連を辿る方向を矯正する</li>\n<li>限定子を付加し、多重度を効果的に減らす</li>\n<li>本質的ではない関連を除去する\n（例）「国」と「大統領名」の関連</li>\n</ol>\n<p>任意のオブジェクトが状態が異なったり別々の実装をまたいだりしても追跡されるような連続性と一意性をもっているか、あるいは他の何かの状態を記述する属性なのか、が<strong>エンティティと値オブジェクトの基本的な区別である</strong>\nドメインの側面んいよってはオブジェクトとしてよりもアクションや操作として表現した方が明確になるものもあり、これらについては<strong>サービス</strong>として扱い、操作を行う責務はエンティティや値オブジェクトに押し付けないのが適切である</p>\n<p><strong>モデルにおいて辿ることのできる関連それぞれに対応して、ソフトウェアにおいても同じ特性を持つ仕組みが存在する</strong></p>\n<p>関連を扱いやすくする方法</p>\n<ol>\n<li>関連をたどる方向を強制する</li>\n<li>限定子をふかし、多重度を効果的に減らす</li>\n<li>本質的ではない関連を除外する</li>\n</ol>\n<h2>エンティティ (参照オブジェクト)</h2>\n<p>多くのオブジェクトは本質的にその属性によってではなく、連続性と同一性によって定義される</p>\n<h2>オブジェクトの中には主要な定義が属性によってなされないものもある。そういうオブジェクトは同一性のつながりを表現するものであり、その同一性は時間が経っても異なる形で表現されても変わらない。そういうオブジェクトは属性が異なっていてもほかのオブジェクトと一致しなければならないことがある。また、あるオブジェクトは、同じ属性を持っていたとしても、他のオブジェクトと区別しなければならない</h2>\n<p>同一性によって定義されるオブジェクトを<strong>エンティティ</strong>と呼ぶ</p>\n<h2>あるオブジェクトが属性でなく同一性によって識別されるのであれば、モデルはこのオブジェクトを定義する際にはその同一性を第一とすること。クラスの定義をシンプルに保ち、ライフサイクルの連続性と同一性に集中すること。形式や履歴に関係なく各オブジェクトを識別する手段を定義すること。オブジェクト同士を付き合わせる際に、属性を用いるように求めてくる要件には注意すること。各オブジェクトに対して結果が一位となることが保証される操作を定義すること。モデルは、同じものであるということが何を意味するのかを定義しなければならない</h2>\n<p>「予約席」はエンティティで「自由席」はエンティティではない</p>\n<h2>値オブジェクト</h2>\n<p>多くのオブジェクトには概念的な同一性がない</p>\n<h2>エンティティの同一性を追跡するのは本質的なことだが、それ以外のオブジェクトに同一性を与えてしまうとシステムの性能を損なうことになり、分析作業が増え、さらに全てのオブクトの見た目が同じになってしまうことでモデルが台無しになりかねない。</h2>\n<p>値オブジェクトはしばしばオブジェクト間のメッセージでパラメータとして渡される。</p>\n<h2>あるモデル要素において、その属性しか関心の対象とならないのであればその要素を値オブジェクトとして分類すること</h2>\n<h2>サービス</h2>\n<h2>ドメインから生まれる概念の中には、オブジェクトをモデル化すると不自然なものもある。こうしたドメインで必要な機能をエンティティや値オブジェクトの責務として押し付けると、モデルに基づくオブジェクトの定義を歪めるか、意味のない不自然なオブジェクトを追加することになる</h2>\n<p>優れたサービスにある三つの特徴</p>\n<ol>\n<li>操作がドエミンの概念に関係しており、その概念がエンティティや値オブジェクトの自然な一部ではない</li>\n<li>ドメインモデルの他の要素の観点からインターフェースが定義されている</li>\n<li>操作に状態がない</li>\n</ol>\n<h2>モジュール</h2>\n<h2>モジュールはコードだけでなく概念も分割される。</h2>\n<h2>モジュールを選択する際には、システムに関する物語を伝え、概念の凝集した集合を含んでいるものを選ぶこと。そうすることでモジュール間は疎結合になることが多い。モジュールにはユビキタス言語の一部になる名前をつけること。モジュールとその名前はドメインに対する洞察を反映しなければならない。</h2>\n<h1>第6章(ドメインオブジェクトのライフサイクル)</h1>\n<p>オブジェクトのライフサイクル(生成から消失まで)において、他のオブジェクトとの間に複雑な相互依存関係がある。\n特に、モデル駆動設計において、</p>\n<ol>\n<li>ライフサイクルを通じて生合成を維持すること</li>\n<li>ライフサイクルを管理するのが複雑でも、モデルが侵食されないようにする</li>\n</ol>\n<p>の二つのカテゴリが課題としてある。\n以下、三つのパターンでこれらに対応する。</p>\n<h2>集約(AGGREGATES)</h2>\n<p>カプセル化と、そのための抽象化が必要。\n各集約にはルートと境界がある</p>\n<ul>\n<li><strong>境界</strong>…集約の内部に何があるか定義する</li>\n<li><strong>ルート</strong>…集約に含まれている特定の１エンティティ</li>\n</ul>\n<p>集約を実装するにあたって、全てのトランザクションに適用できるルールが必要になる</p>\n<ul>\n<li>集約のルートエンティティはグローバルな同一性を持ち、不変条件をチェックする最終的な責務を負う</li>\n<li>ルートエンティティはグローバルな同一性を持つ。境界内部のエンティティは週やうないでのみ一位となるろーかるな同一性を持つ</li>\n<li>集約の境界外にあるオブジェクトは、ルートオブジェクトを覗き、境界内部への参照を保持できない</li>\n<li>データベースに問い合わせて直接取得出来るのは集約ルートだけである</li>\n<li>集約内部のオブジェクトは他の集約ルートへの参照を保持できる</li>\n<li>削除の操作は、集約境界内部に存在するあらゆるものを一度に削除しなければならない</li>\n<li>集約境界内部に存在するオブジェクトに対する変更がコミットされるときには集約全体の不変条件が全て満たされていなければならない</li>\n</ul>\n<h2>エンティティと値オブジェクトを集約の中にまとめ、各集約の周囲に境界を定義すること。各集約に対してルートとなるエンティティを一つ選び、境界内部に存在するオブジェクトへのアクセスは、そのルートを経由して制御する。</h2>\n<h2>ファクトリ(FACTORIES)</h2>\n<p>複雑なオブジェクトと集約のインスタンス生成を請け負う</p>\n<h2>集約全体をひとまとまりとして生成し、その不変条件を強制すること</h2>\n<p><strong>優れたファクトリの2要件</strong></p>\n<ul>\n<li>生成メソッドはそれぞれアトミックであり、生成するオブジェクトや集約の不変条件を全て矯正する</li>\n<li>ファクトリは生成される具象クラスではなく要求される型に応じて抽象化しなければならない(Factory Patern)</li>\n</ul>\n<h2>リポジトリ(REPOSITORIES)</h2>\n<h2>グローバルアクセスを必要とするオブジェクトの各型に対して、あるオブジェクトを生成しその型のすべてのオブジェクトで構成されるコレクションがメモリ上にあると錯覚させること。それによって実際のストレージや問い合わせの技術をカプセル化すること</h2>\n<ul>\n<li>特定の型のオブジェクトを全て概念上の集合として表現する</li>\n<li>コレクションのように振る舞わせる</li>\n<li>型を抽象化すること</li>\n<li>クライアントから切り離す利点を活かすこと</li>\n<li>トランザクション制御をクライアントに委ねること</li>\n</ul>\n<p><strong>いずれにしてもカプセル化が重要</strong></p>\n<h1>第7章 言語を使用する</h1>\n<p>ドメインを隔離する\n↓\nエンティティと値オブジェクトを区別する\n↓\nドメインを設計する\n↓\n集約の境界を考える\n↓\nリポジトリを選択する\n↓\nシナリオをウォークスルーする</p>\n<h1>第9章 暗黙的な概念を明示的にする</h1>\n<h2>ドメインモデルとそれに対応したコードが大きく変化するのは、議論で示唆されたり、設計の中に暗に存在したりする概念に開発者が気づき、それを一つあるいは複数のオブジェクトや関係性を使ってモデルの中で明示的に表現した時である</h2>\n<p>ドメインエキスパートの言葉に耳を傾ける\nぎこちなさを精査する</p>\n<p><strong>それほど明白でない概念をモデル化する方法</strong></p>\n<h1>第10章 しなやかな設計</h1>\n<p>レガシーの保守をしないでいいようにする</p>\n<h2>意図の明白なインターフェース</h2>\n<h2>副作用のない関数</h2>\n<h2>表明</h2>\n<p>操作の事後条件と、クラスおよび集約の不変条件を宣言すること</p>\n<h2>概念の輪郭</h2>\n<p>設計要素(操作、インターフェース、クラス、集約)を凝集した単位に分解すること</p>\n<h2>独立したクラス</h2>\n<h2>閉じた操作</h2>\n<h1>第14章 モデルの生合成を維持する</h1>\n<p>(モデルの境界や他のモデルとの関係性を認識し、伝達し、選択するための章)</p>","frontmatter":{"title":"『エリック・エヴァンスのドメイン駆動設計』まとめ","date":"2021.05.17","description":"書籍『エリック・エヴァンスのドメイン駆動設計』のまとめ"}},"previous":{"fields":{"slug":"/テスト駆動開発/"},"frontmatter":{"title":"『テスト駆動開発』のエッセンシャル"}},"next":null},"pageContext":{"id":"3528951c-b974-5649-ba8e-484247a52f60","previousPostId":"c14ac155-6142-560c-a420-b1ef2a87d82e","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}