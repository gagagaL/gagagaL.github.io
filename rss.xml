<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ヨット逆走JS]]></title><description><![CDATA[技術ブログです。雑食なので色々書いていけたらなと。]]></description><link>https://gagagal.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 31 May 2021 13:42:09 GMT</lastBuildDate><item><title><![CDATA[『エリック・エヴァンスのドメイン駆動設計』まとめ]]></title><description><![CDATA[序文 DDD…]]></description><link>https://gagagal.github.io/エリック・エヴァンスのドメイン駆動設計/</link><guid isPermaLink="false">https://gagagal.github.io/エリック・エヴァンスのドメイン駆動設計/</guid><pubDate>Mon, 17 May 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h1&gt;序文&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;DDDの原則&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コアドメインに集中すること&lt;/li&gt;
&lt;li&gt;ドメインの実践者とソフトウェアの実践者による創造的な共同作業を通じてモデルを探求すること&lt;/li&gt;
&lt;li&gt;明示的な境界づけられたコンテキストの内部でユビキタス言語を語ること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;開発がイテレーティブ(反復的)であること&lt;/li&gt;
&lt;li&gt;開発者とドメインエキスパートが密接に関わっている&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;第0章&lt;/h1&gt;
&lt;p&gt;モデル
モデルとは簡素化であり、問題を解決する上で関連する側面を抽象化し、それ以外の詳細を無視することによって行われた&lt;strong&gt;現実に対する一つの解釈&lt;/strong&gt;
図を用いて表現する&lt;/p&gt;
&lt;p&gt;ドメイン
ソフトウェアプログラムはそれを使用するユーザーの何らかの活動や関心と関係があり、ユーザーがプログラムを適用する対象領域がソフトウェアのドメインである
ドメインは具象も抽象(システムなど)もあり得る&lt;/p&gt;
&lt;p&gt;ドメインモデルとは特定の図ではなく、図が伝えようとしている考え方である&lt;/p&gt;
&lt;h2&gt;ドメイン駆動設計におけるモデルの有用性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;モデルと設計の確信が相互に形成し合う&lt;/li&gt;
&lt;li&gt;モデルはチームメンバー全員が使用する言語の基盤である&lt;/li&gt;
&lt;li&gt;モデルとは蒸留された知識である…モデルは、ドメインの知識を構成して最も関心のある要素を区別するための、チーム内で取り決めた方法である&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ソフトウェアの核心はドメインに関係した問題をユーザーの為に解決する能力である&lt;/p&gt;
&lt;p&gt;モンティ・パイソンの例&lt;/p&gt;
&lt;h1&gt;第1章&lt;/h1&gt;
&lt;p&gt;知識を噛み砕く&lt;/p&gt;
&lt;h2&gt;効果的なモデリングの要素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;モデルと実装を結びつける&lt;/li&gt;
&lt;li&gt;モデルに基づいて言語を洗練させる&lt;/li&gt;
&lt;li&gt;知識豊富なモデルを開発する&lt;/li&gt;
&lt;li&gt;モデルを蒸留する&lt;/li&gt;
&lt;li&gt;ブレインストーミングと実験を行う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;知識の噛み砕き&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;継続的学習&lt;/strong&gt;
→&lt;strong&gt;ソフトウェアを書き始める時、我々は対象を十分に理解しているわけではない&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ポリシーも考える必要がある&lt;/p&gt;
&lt;p&gt;知識を噛み砕くことによって初めて、ルールが明確となり、具体化され、折り合いがつけられるか、あるいはスコープの対象外とされるのである&lt;/p&gt;
&lt;h1&gt;第2章(コミュニケーションと言語の使い方)&lt;/h1&gt;
&lt;p&gt;ドメインモデルは、ソフトウェアプロジェクトにおける共通言語のコアとなることができる&lt;/p&gt;
&lt;p&gt;モデルとは、プロジェクトに関わる人々の頭の中で構築された概念の塊であり、ドメインについての洞察を反映した用語と概念間の関係性からできている&lt;/p&gt;
&lt;p&gt;ドメインエキスパートと開発者での言語の亀裂が問題である&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共通言語（ユビキタス言語）を図やドキュメント、会話の中で用いることユビキタス言語の変更はモデルに対する変更だと思っていること&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ユビキタス言語の語彙には、クラスや主要な操作の名前が含まれていて、また、モデルの中で明示されたルールについて議論するための用語も含まれている&lt;/p&gt;
&lt;p&gt;ユビキタス言語は開発者同士、開発者とドメインエキスパート同士で当然の如く用いられてなければならない&lt;/p&gt;
&lt;p&gt;ユビキタス言語を用いる上での不便さこそが設計の不備を教えてくれる&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ユビキタス言語における変更は、モデルに対する変更である&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ユビキタス言語は、設計にあってコードに現れない側面を伝達するための主要な手段である&lt;/p&gt;
&lt;p&gt;モデルを改良する最適な方法の一つは&lt;strong&gt;話すこと&lt;/strong&gt;である&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ドメインエキスパートがモデルを理解できないのなら、モデルに問題がある&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;モデルは図ではない&lt;/p&gt;
&lt;p&gt;ドキュメントが守るべき指針&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;すでにコードがうまくやっていることを、ドキュメントでもやろうとするべきでは無い&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ドキュメントは活動の役に立たなければならず、最新の状態に保たなければならない&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;第3章(モデルと実装を結びつける)&lt;/h1&gt;
&lt;p&gt;モデルを作るもののコーディングとは結びつかない(あるいは意図的に断絶される)ものが多い&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;設計、あるいは設計の中心となる部分がドメインモデルに紐づいていないならばそのモデルにほとんど価値はなく、そのソフトウェアが正確かどうかも疑わしい。分析と設計の間に致命的な亀裂が生じていると、それらの作業で得られる洞察は互いに生かされない&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;モデル駆動設計は分析モデルと設計という二分法を捨て去り、両方の目的に使える単一のモデルを探し出す。
&lt;strong&gt;そのモデルは全く別々の二つの目標を満たす必要があるため、我々はモデルに対する要求をもっと厳しくしなければならない&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;ソフトウェアシステムの一部を設計する際には、紐づけが明らかになるようにドメインモデルを文字通りの意味で忠実に反映させる必要がある。モデルについて再検討し、より自然にソフトウェアに実装されるように修正する。逆にドメインに対する深い洞察を反映させようとするときにも言える。&lt;/h2&gt;
&lt;p&gt;モデルは全員の共通認識にしなければならない&lt;/p&gt;
&lt;h1&gt;第4章(ドメインを隔離する)&lt;/h1&gt;
&lt;h2&gt;オブジェクト指向プログラムでは、UI、DB、およびその他の補助的なコードがビジネスオブジェクトに直接描かれることはしばしばあるが、ドメイン関連のコードがそうした膨大な他のコード内に拡散してしまうと、コードを見て意味を理解するのが極めて困難になってしまう。&lt;/h2&gt;
&lt;p&gt;↓
ドメインオブジェクトはシステムの他の昨日から切り離されていなければならない。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;レイヤ化アーキテクチャー&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI層(プレゼンテーション層)…ユーザーに情報を提示し、ユーザーのコマンドを解釈する責務を負う&lt;/li&gt;
&lt;li&gt;アプリケーション層…ソフトウェアが行うことになっている仕事を定義し、表現力豊かなドメインオブジェクトが問題を解決するように導く。このレイヤは薄く保たれる。&lt;/li&gt;
&lt;li&gt;ドメイン層(モデル層) …ビジネスの概念と、ビジネスが置かれた状況に関す情報、およびビジネスルールを表す責務を負う。&lt;strong&gt;この層がビジネスソフトウェアの確信である&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;インフラストラクチャ層…上位のレイヤを支える一般的な技術的機能を提供する。
プロジェクトによってはUI層とアプリケーション層を厳密に区別しなかったり、複数のインフラストラクチャ層を持つこともある。しかし、ドメイン層を分離して初めてモデル駆動開発が可能になる。
それゆえ、&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;複雑なプログラムはレイヤに分割すること。各レイヤで設計を進め、凝集度を高めて下位層にだけ依存すること。上位のレイヤに対しては疎結合を保つこと。ドメインモデルに関係するコード全部を一つの層に集中させ、他の層から分離すること。表示や格納、アプリケーションタスク管理などの責務から解放されること。&lt;/h2&gt;
&lt;p&gt;上位のレイヤは下位のレイヤにある要素を直接使用したり操作したりできる。下位のレイヤにあるオブジェクトが上位と通信しなければならない場合は、コールバックやオブザーバなど、レイヤ同士を関係付ける別のアーキテクチャパターン・仕組みが必要になる。&lt;/p&gt;
&lt;h2&gt;アンチパターン「利口なUI」&lt;/h2&gt;
&lt;h1&gt;第5章(ソフトウェアで表現されたモデル)&lt;/h1&gt;
&lt;h2&gt;モデルを表現する3パターン&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;エンティティ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;値オブジェクト&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;サービス&lt;/strong&gt; (オブジェクトというより操作やアクションとして捉えた方がいいもの)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、モデル駆動設計においてモジュールもモデルの一部であり、ドメインにある概念を反映していなければならない&lt;/p&gt;
&lt;p&gt;モデリングにおける関連は実装における関連とそれぞれ特性が同じものが存在するべきである
関連を扱いやすくする方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;関連を辿る方向を矯正する&lt;/li&gt;
&lt;li&gt;限定子を付加し、多重度を効果的に減らす&lt;/li&gt;
&lt;li&gt;本質的ではない関連を除去する
（例）「国」と「大統領名」の関連&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任意のオブジェクトが状態が異なったり別々の実装をまたいだりしても追跡されるような連続性と一意性をもっているか、あるいは他の何かの状態を記述する属性なのか、が&lt;strong&gt;エンティティと値オブジェクトの基本的な区別である&lt;/strong&gt;
ドメインの側面んいよってはオブジェクトとしてよりもアクションや操作として表現した方が明確になるものもあり、これらについては&lt;strong&gt;サービス&lt;/strong&gt;として扱い、操作を行う責務はエンティティや値オブジェクトに押し付けないのが適切である&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;モデルにおいて辿ることのできる関連それぞれに対応して、ソフトウェアにおいても同じ特性を持つ仕組みが存在する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;関連を扱いやすくする方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;関連をたどる方向を強制する&lt;/li&gt;
&lt;li&gt;限定子をふかし、多重度を効果的に減らす&lt;/li&gt;
&lt;li&gt;本質的ではない関連を除外する&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;エンティティ (参照オブジェクト)&lt;/h2&gt;
&lt;p&gt;多くのオブジェクトは本質的にその属性によってではなく、連続性と同一性によって定義される&lt;/p&gt;
&lt;h2&gt;オブジェクトの中には主要な定義が属性によってなされないものもある。そういうオブジェクトは同一性のつながりを表現するものであり、その同一性は時間が経っても異なる形で表現されても変わらない。そういうオブジェクトは属性が異なっていてもほかのオブジェクトと一致しなければならないことがある。また、あるオブジェクトは、同じ属性を持っていたとしても、他のオブジェクトと区別しなければならない&lt;/h2&gt;
&lt;p&gt;同一性によって定義されるオブジェクトを&lt;strong&gt;エンティティ&lt;/strong&gt;と呼ぶ&lt;/p&gt;
&lt;h2&gt;あるオブジェクトが属性でなく同一性によって識別されるのであれば、モデルはこのオブジェクトを定義する際にはその同一性を第一とすること。クラスの定義をシンプルに保ち、ライフサイクルの連続性と同一性に集中すること。形式や履歴に関係なく各オブジェクトを識別する手段を定義すること。オブジェクト同士を付き合わせる際に、属性を用いるように求めてくる要件には注意すること。各オブジェクトに対して結果が一位となることが保証される操作を定義すること。モデルは、同じものであるということが何を意味するのかを定義しなければならない&lt;/h2&gt;
&lt;p&gt;「予約席」はエンティティで「自由席」はエンティティではない&lt;/p&gt;
&lt;h2&gt;値オブジェクト&lt;/h2&gt;
&lt;p&gt;多くのオブジェクトには概念的な同一性がない&lt;/p&gt;
&lt;h2&gt;エンティティの同一性を追跡するのは本質的なことだが、それ以外のオブジェクトに同一性を与えてしまうとシステムの性能を損なうことになり、分析作業が増え、さらに全てのオブクトの見た目が同じになってしまうことでモデルが台無しになりかねない。&lt;/h2&gt;
&lt;p&gt;値オブジェクトはしばしばオブジェクト間のメッセージでパラメータとして渡される。&lt;/p&gt;
&lt;h2&gt;あるモデル要素において、その属性しか関心の対象とならないのであればその要素を値オブジェクトとして分類すること&lt;/h2&gt;
&lt;h2&gt;サービス&lt;/h2&gt;
&lt;h2&gt;ドメインから生まれる概念の中には、オブジェクトをモデル化すると不自然なものもある。こうしたドメインで必要な機能をエンティティや値オブジェクトの責務として押し付けると、モデルに基づくオブジェクトの定義を歪めるか、意味のない不自然なオブジェクトを追加することになる&lt;/h2&gt;
&lt;p&gt;優れたサービスにある三つの特徴&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作がドエミンの概念に関係しており、その概念がエンティティや値オブジェクトの自然な一部ではない&lt;/li&gt;
&lt;li&gt;ドメインモデルの他の要素の観点からインターフェースが定義されている&lt;/li&gt;
&lt;li&gt;操作に状態がない&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;モジュール&lt;/h2&gt;
&lt;h2&gt;モジュールはコードだけでなく概念も分割される。&lt;/h2&gt;
&lt;h2&gt;モジュールを選択する際には、システムに関する物語を伝え、概念の凝集した集合を含んでいるものを選ぶこと。そうすることでモジュール間は疎結合になることが多い。モジュールにはユビキタス言語の一部になる名前をつけること。モジュールとその名前はドメインに対する洞察を反映しなければならない。&lt;/h2&gt;
&lt;h1&gt;第6章(ドメインオブジェクトのライフサイクル)&lt;/h1&gt;
&lt;p&gt;オブジェクトのライフサイクル(生成から消失まで)において、他のオブジェクトとの間に複雑な相互依存関係がある。
特に、モデル駆動設計において、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ライフサイクルを通じて生合成を維持すること&lt;/li&gt;
&lt;li&gt;ライフサイクルを管理するのが複雑でも、モデルが侵食されないようにする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の二つのカテゴリが課題としてある。
以下、三つのパターンでこれらに対応する。&lt;/p&gt;
&lt;h2&gt;集約(AGGREGATES)&lt;/h2&gt;
&lt;p&gt;カプセル化と、そのための抽象化が必要。
各集約にはルートと境界がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;境界&lt;/strong&gt;…集約の内部に何があるか定義する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ルート&lt;/strong&gt;…集約に含まれている特定の１エンティティ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集約を実装するにあたって、全てのトランザクションに適用できるルールが必要になる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集約のルートエンティティはグローバルな同一性を持ち、不変条件をチェックする最終的な責務を負う&lt;/li&gt;
&lt;li&gt;ルートエンティティはグローバルな同一性を持つ。境界内部のエンティティは週やうないでのみ一位となるろーかるな同一性を持つ&lt;/li&gt;
&lt;li&gt;集約の境界外にあるオブジェクトは、ルートオブジェクトを覗き、境界内部への参照を保持できない&lt;/li&gt;
&lt;li&gt;データベースに問い合わせて直接取得出来るのは集約ルートだけである&lt;/li&gt;
&lt;li&gt;集約内部のオブジェクトは他の集約ルートへの参照を保持できる&lt;/li&gt;
&lt;li&gt;削除の操作は、集約境界内部に存在するあらゆるものを一度に削除しなければならない&lt;/li&gt;
&lt;li&gt;集約境界内部に存在するオブジェクトに対する変更がコミットされるときには集約全体の不変条件が全て満たされていなければならない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;エンティティと値オブジェクトを集約の中にまとめ、各集約の周囲に境界を定義すること。各集約に対してルートとなるエンティティを一つ選び、境界内部に存在するオブジェクトへのアクセスは、そのルートを経由して制御する。&lt;/h2&gt;
&lt;h2&gt;ファクトリ(FACTORIES)&lt;/h2&gt;
&lt;p&gt;複雑なオブジェクトと集約のインスタンス生成を請け負う&lt;/p&gt;
&lt;h2&gt;集約全体をひとまとまりとして生成し、その不変条件を強制すること&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;優れたファクトリの2要件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成メソッドはそれぞれアトミックであり、生成するオブジェクトや集約の不変条件を全て矯正する&lt;/li&gt;
&lt;li&gt;ファクトリは生成される具象クラスではなく要求される型に応じて抽象化しなければならない(Factory Patern)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;リポジトリ(REPOSITORIES)&lt;/h2&gt;
&lt;h2&gt;グローバルアクセスを必要とするオブジェクトの各型に対して、あるオブジェクトを生成しその型のすべてのオブジェクトで構成されるコレクションがメモリ上にあると錯覚させること。それによって実際のストレージや問い合わせの技術をカプセル化すること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特定の型のオブジェクトを全て概念上の集合として表現する&lt;/li&gt;
&lt;li&gt;コレクションのように振る舞わせる&lt;/li&gt;
&lt;li&gt;型を抽象化すること&lt;/li&gt;
&lt;li&gt;クライアントから切り離す利点を活かすこと&lt;/li&gt;
&lt;li&gt;トランザクション制御をクライアントに委ねること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;いずれにしてもカプセル化が重要&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;第7章 言語を使用する&lt;/h1&gt;
&lt;p&gt;ドメインを隔離する
↓
エンティティと値オブジェクトを区別する
↓
ドメインを設計する
↓
集約の境界を考える
↓
リポジトリを選択する
↓
シナリオをウォークスルーする&lt;/p&gt;
&lt;h1&gt;第9章 暗黙的な概念を明示的にする&lt;/h1&gt;
&lt;h2&gt;ドメインモデルとそれに対応したコードが大きく変化するのは、議論で示唆されたり、設計の中に暗に存在したりする概念に開発者が気づき、それを一つあるいは複数のオブジェクトや関係性を使ってモデルの中で明示的に表現した時である&lt;/h2&gt;
&lt;p&gt;ドメインエキスパートの言葉に耳を傾ける
ぎこちなさを精査する&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;それほど明白でない概念をモデル化する方法&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;第10章 しなやかな設計&lt;/h1&gt;
&lt;p&gt;レガシーの保守をしないでいいようにする&lt;/p&gt;
&lt;h2&gt;意図の明白なインターフェース&lt;/h2&gt;
&lt;h2&gt;副作用のない関数&lt;/h2&gt;
&lt;h2&gt;表明&lt;/h2&gt;
&lt;p&gt;操作の事後条件と、クラスおよび集約の不変条件を宣言すること&lt;/p&gt;
&lt;h2&gt;概念の輪郭&lt;/h2&gt;
&lt;p&gt;設計要素(操作、インターフェース、クラス、集約)を凝集した単位に分解すること&lt;/p&gt;
&lt;h2&gt;独立したクラス&lt;/h2&gt;
&lt;h2&gt;閉じた操作&lt;/h2&gt;
&lt;h1&gt;第14章 モデルの生合成を維持する&lt;/h1&gt;
&lt;p&gt;(モデルの境界や他のモデルとの関係性を認識し、伝達し、選択するための章)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[『テスト駆動開発』のエッセンシャル]]></title><description><![CDATA[テスト駆動開発の手法 やることをTODO…]]></description><link>https://gagagal.github.io/テスト駆動開発/</link><guid isPermaLink="false">https://gagagal.github.io/テスト駆動開発/</guid><pubDate>Thu, 13 May 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h1&gt;テスト駆動開発の手法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;やることをTODOリストに書き出す(これは随時思いつき次第追加していく)&lt;/li&gt;
&lt;li&gt;小さいテストを一つ書く&lt;/li&gt;
&lt;li&gt;全てのテストを実行し、先程の一つだけが失敗することを確認する&lt;/li&gt;
&lt;li&gt;コンパイルエラーを通す&lt;/li&gt;
&lt;li&gt;テストを通すための最小限の変更を行い、全てのテストが成功することを確認する&lt;/li&gt;
&lt;li&gt;リファクタリングを行い&lt;strong&gt;重複&lt;/strong&gt;を除去する&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;テスト駆動開発の心得&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;細かいステップを&lt;strong&gt;踏み続けられるようにする&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TDDの三つの戦略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仮実装&lt;/strong&gt; … コードでまずベタ書きの値をつかい、実装を進めるに従って徐々に変数に置き換えていく&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;明白な実装&lt;/strong&gt; … すぐに頭の中の実装をコードに落とす&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三角測量&lt;/strong&gt; … 既存のコードに二つ目の実例を追加する(trueを確かめるものがあればfalseを吐き出すもの、など)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[『ハイパフォーマンスPython』まとめ]]></title><description><![CDATA[序章]]></description><link>https://gagagal.github.io/ハイパフォーマンスPython/</link><guid isPermaLink="false">https://gagagal.github.io/ハイパフォーマンスPython/</guid><pubDate>Wed, 05 May 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h1&gt;序章&lt;/h1&gt;</content:encoded></item><item><title><![CDATA[『熊とワルツを』まとめ]]></title><description><![CDATA[序章]]></description><link>https://gagagal.github.io/熊とワルツを/</link><guid isPermaLink="false">https://gagagal.github.io/熊とワルツを/</guid><pubDate>Tue, 04 May 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h1&gt;序章&lt;/h1&gt;</content:encoded></item><item><title><![CDATA[『リファクタリング』まとめ Part1]]></title><description><![CDATA[マーチン・ファウラー著『リファクタリング プログラミングの体質改善テクニック』をまとめていく。 気になった箇所、現在にも応用できそうな箇所を特に記載していくので、全てを書き記すわけではない。 第…]]></description><link>https://gagagal.github.io/2021-03-01/</link><guid isPermaLink="false">https://gagagal.github.io/2021-03-01/</guid><pubDate>Mon, 01 Mar 2021 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;マーチン・ファウラー著『リファクタリング プログラミングの体質改善テクニック』をまとめていく。&lt;br&gt;
気になった箇所、現在にも応用できそうな箇所を特に記載していくので、全てを書き記すわけではない。&lt;/p&gt;
&lt;h1&gt;第1章  リファクタリング-最初の例&lt;/h1&gt;
&lt;p&gt;実例を交えながらリファクタリングがどういうものか説明している。&lt;br&gt;
&lt;strong&gt;全体を読んだ後に読んだ方が良さそうなので後回し。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;第2章 リファクタリングの原則&lt;/h1&gt;
&lt;h2&gt;リファクタリングの定義&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リファクタリング(名詞)&lt;/strong&gt;…外部から見た時の振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変換させること。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;リファクタリングする(動詞)&lt;/strong&gt;…一連のリファクタリングを行って、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること。&lt;/p&gt;
&lt;h2&gt;リファクタリングを行う理由&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;・リファクタリングはソフトウェア設計を向上させる&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・リファクタリングはソフトウェアを理解しやすくする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・リファクタリングはバグを見つけ出す&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・リファクタリングでより早くプログラミングできる&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;いつリファクタリングするべきか&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;・“三度目の法則”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重複や無駄を意識しつつも二度目までならとにかく作業を続けても構わず、三度目に同じようなことをしていると気づいたならばそこでリファクタリングする。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・機能追加時にリファクタリングを行う&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;これから修正しようとしているコードを理解する為、容易に機能追加ができない設計が存在する為&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・バグフィックス時にリファクタリングを行う&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・コードレビューの時にリファクタリングを行う&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;第3章 コードの不吉な匂い&lt;/h1&gt;
&lt;p&gt;リファクタリングの必要を示す不吉な兆候&lt;br&gt;
&lt;strong&gt;特に重要な章&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;重複したコード&lt;/h2&gt;
&lt;p&gt;同じようなコードが二箇所以上で見られたら、一箇所にまとめることを考える  &lt;/p&gt;
&lt;p&gt;同一クラス内の複数メソッドに同じ式がある→&lt;strong&gt;メソッドの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重複したコードが兄弟クラス間に見られる→&lt;strong&gt;メソッドの抽出&lt;/strong&gt;、&lt;strong&gt;メソッドの引き上げ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全く関係のない二つのクラス間で重複したコードが見られる→&lt;strong&gt;クラスの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;長すぎるメソッド&lt;/h2&gt;
&lt;p&gt;間接層を持たせるべき。  &lt;/p&gt;
&lt;p&gt;メソッドを短くしたい→&lt;strong&gt;メソッドの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引数や一時変数が多すぎるメソッド→&lt;strong&gt;問い合わせによる一時変数の置き換え&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;長い引数リスト→&lt;strong&gt;引数オブジェクトの導入&lt;/strong&gt;、&lt;strong&gt;オブジェクトそのものの受け渡し&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;それでも一時変数や引数が残る→&lt;strong&gt;メソッドオブジェクトによるメソッドの置き換え&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;条件分岐やループ→&lt;strong&gt;条件記述の分解&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;巨大なクラス&lt;/h2&gt;
&lt;p&gt;一つのクラスがあまりに多くの仕事をしている時、たいていインスタンス変数を持ちすぎている。よって重複コードが現れやすい。&lt;/p&gt;
&lt;p&gt;いくつかの変数をまとめる→&lt;strong&gt;クラスの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新しいコンポーネントがサブクラスになりそう→&lt;strong&gt;サブクラスの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;クラスがインスタンス変数を全て使っていない→&lt;strong&gt;クラスの抽出&lt;/strong&gt;、&lt;strong&gt;サブクラスの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;インタフェースの抽出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巨大なクラスがGUI部分である→&lt;strong&gt;観察されるデータの複製&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;多すぎる引数&lt;/h2&gt;
&lt;p&gt;既知のオブジェクトに問い合わせてそのデータを一つの引数にしてうけとることが可能→&lt;strong&gt;メソッドによる引数の置き換え&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;オブジェクトそのものの受け渡し&lt;/strong&gt;、&lt;strong&gt;引数オブジェクトの導入&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;変更の発散&lt;/h2&gt;
&lt;p&gt;一つのクラスが互いに独立した理由で同じように変更され、その手順も異なる状態&lt;br&gt;
(例)データベースが新しくなるたびに3つのメソッドを変更しなければならない&lt;/p&gt;
&lt;p&gt;変更理由ごとにクラスをまとめていく→&lt;strong&gt;クラスの抽出&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[0円で作るGatsby + Github Pagesの静的ブログ 2]]></title><description><![CDATA[今のままだと該当記事に辿り着くのがいずれ大変になってきそうなので、タグ検索機能を追加します。 ・各記事Markdownファイルにタグ項目追加 ・各タグの一覧ページを作る
・ 各記事Markdownファイルにタグ項目追加 各記事のMarkdown…]]></description><link>https://gagagal.github.io/2021-02-26/</link><guid isPermaLink="false">https://gagagal.github.io/2021-02-26/</guid><pubDate>Fri, 26 Feb 2021 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;今のままだと該当記事に辿り着くのがいずれ大変になってきそうなので、タグ検索機能を追加します。&lt;/p&gt;
&lt;p&gt;・各記事Markdownファイルにタグ項目追加&lt;br&gt;
・各タグの一覧ページを作る
・&lt;/p&gt;
&lt;h2&gt;各記事Markdownファイルにタグ項目追加&lt;/h2&gt;
&lt;p&gt;各記事のMarkdownファイルの上部に&lt;strong&gt;frontmatter&lt;/strong&gt;という形式でメタ情報を書き込む箇所があるが、そこにtagsという項目を追加する。 &lt;/p&gt;
&lt;p&gt;今回の記事で言うと&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;---
title: Gatsby + Github Pagesで0円静的ブログ作り 2
date: &amp;quot;2021-02-26T22:12:03.284Z&amp;quot;
description: &amp;quot;このブログにタグ機能を追加する&amp;quot;
tags: [&amp;quot;Gatsby&amp;quot;, &amp;quot;GraphQL&amp;quot;]
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようにする。&lt;/p&gt;
&lt;p&gt;GraqhQLでの&lt;strong&gt;allMarkdownRemark&lt;/strong&gt;と&lt;strong&gt;markdownRemark&lt;/strong&gt;というクエリでMarkdownファイルを取得し、frontmatterのメタ情報はここに含まれる。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;aidl&quot;&gt;&lt;pre class=&quot;language-aidl&quot;&gt;&lt;code class=&quot;language-aidl&quot;&gt;npm run develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で &lt;a href=&quot;http://localhost:8000/___graphql&quot;&gt;http://localhost:8000/___graphql&lt;/a&gt; にアクセスすることでGraphQLのクエリを投げた際の挙動を確認できる。&lt;/p&gt;
&lt;h2&gt;各タグの一覧ページを作る&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Gatsby,GraphQL]]></title><description><![CDATA[Gatsbyについて Gatsbyでのブログの作り方を説明してしまったんで内容は前後しますが、一旦Gatsbyの説明を。   ・Reactベースの静的サイトジェネレーター ・SPAで動く ・内部はGraphQLで動く(データへのインタフェースの一元化)   Gatsby…]]></description><link>https://gagagal.github.io/2021-02-25/</link><guid isPermaLink="false">https://gagagal.github.io/2021-02-25/</guid><pubDate>Thu, 25 Feb 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h2&gt;Gatsbyについて&lt;/h2&gt;
&lt;p&gt;Gatsbyでのブログの作り方を説明してしまったんで内容は前後しますが、一旦Gatsbyの説明を。  &lt;/p&gt;
&lt;p&gt;・Reactベースの静的サイトジェネレーター&lt;br&gt;
・SPAで動く&lt;br&gt;
・内部はGraphQLで動く(データへのインタフェースの一元化)  &lt;/p&gt;
&lt;p&gt;Gatsbyについてはブログ作成中に同時進行で学ぼうとしているので、どんどん追記していきたい。&lt;/p&gt;
&lt;h2&gt;GraphQLについて&lt;/h2&gt;
&lt;p&gt;次はこのブログの記事にタグ検索機能をつけたいので、GraphQLについてもほんの少し。  &lt;/p&gt;
&lt;p&gt;・Facebookが開発しているオープンソースのクエリ言語  &lt;/p&gt;
&lt;p&gt;詳しい使い方は、タグ検索機能を作成する際にでも。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[0円で作るGatsby + Github Pagesの静的ブログ 1]]></title><description><![CDATA[はじめに 作業報告などを他の人の目を考えずにもっと気軽にしたいなと思い、Qiitaとは違う技術ブログを1から作りたいと思って色々調べました。   Reactも勉強したいものの一つだったので、Reactベースで静的ブログを作るGatsbyを採用して、Github Pages…]]></description><link>https://gagagal.github.io/2021-02-24/</link><guid isPermaLink="false">https://gagagal.github.io/2021-02-24/</guid><pubDate>Wed, 24 Feb 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;作業報告などを他の人の目を考えずにもっと気軽にしたいなと思い、Qiitaとは違う技術ブログを1から作りたいと思って色々調べました。  &lt;/p&gt;
&lt;p&gt;Reactも勉強したいものの一つだったので、Reactベースで静的ブログを作るGatsbyを採用して、Github Pagesにて無料で公開することを目指しました。  &lt;/p&gt;
&lt;p&gt;とりあえず一旦はデザインなどを凝らずに、アップすることを第一目標に。&lt;/p&gt;
&lt;h2&gt;いざ作る&lt;/h2&gt;
&lt;p&gt;そもそもGatsby自体がGithub Pagesで公開されるパターンも想定しているので、割りとスムーズに開発できました。  &lt;/p&gt;
&lt;p&gt;まず、&lt;strong&gt;(ユーザー名).github.io&lt;/strong&gt; という名前のリポジトリをGithubで作成し、クローン。  &lt;/p&gt;
&lt;p&gt;そのリポジトリ内で、  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;aidl&quot;&gt;&lt;pre class=&quot;language-aidl&quot;&gt;&lt;code class=&quot;language-aidl&quot;&gt;npm install -g gatsby-cli
gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;かなりベーシックながらブログチックで拡張しやすい構成を最初から提示してくれるgatsby-starter-blogを採用。  &lt;/p&gt;
&lt;p&gt;“blog”という名前のディレクトリが作成されますが、この名前は別に何でも大丈夫みたいです。  &lt;/p&gt;
&lt;p&gt;そして、&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;aidl&quot;&gt;&lt;pre class=&quot;language-aidl&quot;&gt;&lt;code class=&quot;language-aidl&quot;&gt;cd blog
npm install --save gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、package.jsonのscriptに&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;aidl&quot;&gt;&lt;pre class=&quot;language-aidl&quot;&gt;&lt;code class=&quot;language-aidl&quot;&gt;&amp;quot;deploy&amp;quot;: &amp;quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を追記。  &lt;/p&gt;
&lt;p&gt;すると、&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;aidl&quot;&gt;&lt;pre class=&quot;language-aidl&quot;&gt;&lt;code class=&quot;language-aidl&quot;&gt;npm run deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;でデプロイ。 &lt;/p&gt;
&lt;p&gt;GithubのリポジトリのSettingからGithub PagesのURLに飛べば、反映されていることが確認できる。  &lt;/p&gt;
&lt;h3&gt;今後やりたいこと&lt;/h3&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; タグ機能追加  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; デザイン調整  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; ページネーション(可能なら)  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; ドメイン変更    &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[初めに]]></title><description><![CDATA[自己紹介 名前：gagagaL 生まれ:1989年10月 SEになって5年目。会社の便利屋のようになっていて、色々な技術に触れてはいるけど自分の中であまり整理できている感触がないので、少しずつでもこちらにまとめていきます。 Qiita…]]></description><link>https://gagagal.github.io/first/</link><guid isPermaLink="false">https://gagagal.github.io/first/</guid><pubDate>Tue, 23 Feb 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h2&gt;自己紹介&lt;/h2&gt;
&lt;p&gt;名前：&lt;strong&gt;gagagaL&lt;/strong&gt;&lt;br&gt;
生まれ:&lt;strong&gt;1989年10月&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SEになって5年目。会社の便利屋のようになっていて、色々な技術に触れてはいるけど自分の中であまり整理できている感触がないので、少しずつでもこちらにまとめていきます。&lt;br&gt;
&lt;a href=&quot;https://qiita.com/DenverIA&quot;&gt;Qiita&lt;/a&gt; ともたまに連携させていく予定。  &lt;/p&gt;
&lt;p&gt;ちなみに、ブログのタイトルは、このブログが偉大なるGatsbyで動いていることに由来します。元ネタがわかった方は友達になりましょう。&lt;/p&gt;
&lt;h2&gt;今年やりたいこと・勉強したいもの・読む本 (随時追加)&lt;/h2&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; このブログの整形、デザインの調整&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Django + DeepLearningでアプリ作成&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; OSS参戦&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; CUIアプリ自作&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; GoogleChrome拡張作成&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; バグバウンティ周り勉強(C、C#、Linux、など)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 統計学勉強、統計検定一級に挑戦&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 1シーズンに1つは重ための記事を書く&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; AWS検定&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; IntelliJ周辺まとめ&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; vim周辺まとめ&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Docker、Kubernetes周辺まとめ&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Python&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Typescript&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Rust&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Go&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; GraphQL&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; WebAssembly&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; PWA&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; React&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Nuxt.js(Vue.js)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Laravel&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; React Native&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Flutter&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Swift&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Kotlin&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『リファクタリング』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『レガシーコード改善ガイド』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『エリック・エヴァンスのドメイン駆動設計』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 『テスト駆動開発』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『美しき策謀』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『ハッキング・ラボ』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『Linuxプログラミングインタフェース』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『暗号技術の全て』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『パターン認識と機械学習』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『統計的学習の基礎(原文)』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『ハイパフォーマンスPython』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『Fluent Python』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『マスタリングTCP/IP』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 『入門Vue.js』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『問題解決のPythonプログラミング』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『実践Metasploit』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『熊とワルツを』&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 『プレファクタリング』  &lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=bx3--22D4E4&quot;&gt;Ben Awadで勉強&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=NlZdVtYVo3E&quot;&gt;Adrian Twarogで勉強&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=JD-age0BPVo&quot;&gt;Tim Ruscicaで勉強&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=PfRWP60qxPM&quot;&gt;Caleb Curryで勉強&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=3IlaxZf3-s8&quot;&gt;Clement Mihailescuで勉強&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=QBICL3jPiAM&quot;&gt;Catalin Pitで勉強&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=3IlaxZf3-s8&quot;&gt;Clement Mihailescuで勉強&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>